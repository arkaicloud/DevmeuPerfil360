#!/usr/bin/env node

/**
 * Script de Deploy Seguro para Produ√ß√£o
 * Executa verifica√ß√µes de seguran√ßa antes do deploy
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando processo de deploy para produ√ß√£o...\n');

// Verifica√ß√µes pr√©-deploy
const checks = [
  {
    name: 'Verificar vari√°veis de ambiente',
    check: () => {
      const requiredVars = [
        'DATABASE_URL',
        'STRIPE_SECRET_KEY', 
        'VITE_STRIPE_PUBLIC_KEY'
      ];
      
      const missing = requiredVars.filter(varName => !process.env[varName]);
      if (missing.length > 0) {
        throw new Error(`Vari√°veis de ambiente faltando: ${missing.join(', ')}`);
      }
      return 'Todas as vari√°veis cr√≠ticas configuradas';
    }
  },
  {
    name: 'Testar conex√£o com banco de dados',
    check: async () => {
      try {
        // Importar e testar conex√£o
        const { db } = require('./server/db');
        await db.execute('SELECT 1');
        return 'Conex√£o com banco de dados OK';
      } catch (error) {
        throw new Error(`Erro na conex√£o com banco: ${error.message}`);
      }
    }
  },
  {
    name: 'Verificar chaves Stripe',
    check: () => {
      const secretKey = process.env.STRIPE_SECRET_KEY;
      const publicKey = process.env.VITE_STRIPE_PUBLIC_KEY;
      
      if (!secretKey || !secretKey.startsWith('sk_')) {
        throw new Error('STRIPE_SECRET_KEY inv√°lida');
      }
      
      if (!publicKey || !publicKey.startsWith('pk_')) {
        throw new Error('VITE_STRIPE_PUBLIC_KEY inv√°lida');
      }
      
      return 'Chaves Stripe v√°lidas';
    }
  },
  {
    name: 'Build do frontend',
    check: () => {
      try {
        execSync('npm run build', { stdio: 'pipe' });
        return 'Build do frontend conclu√≠do';
      } catch (error) {
        throw new Error(`Erro no build: ${error.message}`);
      }
    }
  },
  {
    name: 'Verificar schema do banco',
    check: async () => {
      try {
        execSync('npm run db:push', { stdio: 'pipe' });
        return 'Schema do banco atualizado';
      } catch (error) {
        throw new Error(`Erro no schema: ${error.message}`);
      }
    }
  }
];

// Executar verifica√ß√µes
async function runChecks() {
  console.log('üìã Executando verifica√ß√µes pr√©-deploy:\n');
  
  for (const checkItem of checks) {
    try {
      process.stdout.write(`‚è≥ ${checkItem.name}... `);
      const result = await checkItem.check();
      console.log(`‚úÖ ${result}`);
    } catch (error) {
      console.log(`‚ùå ${error.message}`);
      console.error('\nüõë Deploy cancelado devido a erro na verifica√ß√£o.');
      process.exit(1);
    }
  }
}

// Executar deploy
async function deploy() {
  try {
    await runChecks();
    
    console.log('\nüéâ Todas as verifica√ß√µes passaram!');
    console.log('\nüì¶ Sistema pronto para produ√ß√£o:');
    console.log('   ‚Ä¢ Dom√≠nio: www.meuperfil360.com.br');
    console.log('   ‚Ä¢ Banco de dados: PostgreSQL configurado');
    console.log('   ‚Ä¢ Pagamentos: Stripe integrado');
    console.log('   ‚Ä¢ Seguran√ßa: Middlewares ativos');
    console.log('   ‚Ä¢ Email: Sistema configurado');
    
    console.log('\nüöÄ Para finalizar o deploy:');
    console.log('   1. Configure o dom√≠nio no Replit');
    console.log('   2. Ative SSL/HTTPS');
    console.log('   3. Configure as vari√°veis de ambiente de produ√ß√£o');
    console.log('   4. Execute o deploy atrav√©s do Replit');
    
    console.log('\n‚úÖ Deploy preparado com sucesso!');
    
  } catch (error) {
    console.error('\n‚ùå Erro durante o deploy:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  deploy();
}

module.exports = { deploy, runChecks };